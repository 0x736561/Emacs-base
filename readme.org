#+TITLE:  Minha configuração do Emacs
#+AUTHOR: 0x736561
#+STARTUP:overview

Essa configuração é extremamente simples e que não possui nenhum 
pacote externo. O objetivo é ser uma base rápida, eficiente, e 
sem risco de quebrar. 

Basicamente tirar a dor de cabeça de configurar o Emacs do zero.
Ela não é feita para ser algo pronto, nem pra ser uma 
solução para um grupo de pessoas. Ela serve basicamente 
apenas para o meu uso.

Apesar disso, ela é uma configuração que é extremamente portátil por 
conta da sua natureza extremamente simples e por usar apenas 
funcionalidades nativas ou criadas aqui mesmo.

Enfim, divirta-se!

* configurações
** visual
*** aparência

Remoção das barras de ferramentas, menus, barra de rolagem, enfim, 
deixando a aparência do Emacs mais minimalista.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(scroll-bar-mode -1)
(column-number-mode +1)
(blink-cursor-mode -1)
(size-indication-mode +1)
(global-display-line-numbers-mode +1)
(global-prettify-symbols-mode +1)
(global-hl-line-mode +1)
#+end_src

*** fontes

Definindo a fonte padrão do Emacs, a fonte que eu uso é a 
Jetbrains Mono, mas caso você use outra, é só modificar a string.

#+begin_src emacs-lisp
(set-frame-font "JetBrainsMono 10" t)
#+end_src

*** tema

O tema que o Emacs vai utilizar.

#+begin_src emacs-lisp
(load-theme 'misterioso t)
#+end_src

*** utf-8

Deixando a codificação padrão como "utf-8".

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

*** org-mode
#+begin_src emacs-lisp
(electric-pair-mode +1)
(electric-indent-mode -1)
(delete-selection-mode +1)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)  
#+end_src

** variáveis

Definições de variáveis globais.

#+begin_src emacs-lisp
(setq initial-scratch-message nil)
(setq inhibit-startup-screen t)
(setq use-file-dialog nil)
(setq use-dialog-box nil)
(setq pop-up-windows nil)
(setq backup-directory-alist '(("." . "~/.config/emacs/backups/")))
(setq org-src-fontify-natively t)
(setq org-support-shift-select t)
(setq org-edit-src-content-indentation 0)
(setq epa-pinentry-mode 'loopback)
(setq org-hide-leading-stars t)
(setq frame-title-format
      '((:eval (if (buffer-file-name)
		   (abbreviate-file-name (buffer-file-name))
		 "%b"))))
(setq scroll-margin 0
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)
#+end_src

** tela inicial

Uma tela de início simples, o código veio [[https://xenodium.com/emacs-a-welcoming-experiment/][daqui]].
Melhor isso do que a tela inicial padrão do Emacs.

#+begin_src emacs-lisp
(defun ar/show-welcome-buffer ()
  "Show *Welcome* buffer."
  (with-current-buffer (get-buffer-create "*Welcome*")
    (setq truncate-lines t)
    (let* ((buffer-read-only)
           (image-path "~/.config/emacs/emacs.png")
           (image (create-image image-path))
           (size (image-size image))
           (height (cdr size))
           (width (car size))
           (top-margin (floor (/ (- (window-height) height) 2)))
           (left-margin (floor (/ (- (window-width) width) 2)))
           (prompt-title "Pressione 'o' para abrir um arquivo, 'd' para abrir uma pasta, ou 'q' para fechar este buffer."))
      (erase-buffer)
      (setq mode-line-format nil)
      (goto-char (point-min))
      (insert (make-string top-margin ?\n ))
      (insert (make-string left-margin ?\ ))
      (insert-image image)
      (insert "\n\n\n")
      (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
      (insert prompt-title))
    (setq cursor-type nil)
    (read-only-mode +1)
    (switch-to-buffer (current-buffer))
    (local-set-key (kbd "q") 'kill-this-buffer)
    (local-set-key (kbd "o") 'find-file)
    (local-set-key (kbd "d") 'dired)))

(when (< (length command-line-args) 2)
  (add-hook 'emacs-startup-hook (lambda ()
                                  (when (display-graphic-p)
                                    (ar/show-welcome-buffer)))))
#+end_src

** pacotes internos
*** ido-mode

Um modo que substitui outros minor-modes.

#+begin_src emacs-lisp
(ido-mode 1)
#+end_src
*** easypg

wrapper gpg nativo do Emacs, ele é usado na configuração de email e também no cliente irc.

#+begin_src emacs-lisp
(require 'epa-file)
(setq epa-file-encrypt-to "john@doe.com")
(setq epa-file-select-keys -1)
#+end_src

*** rmail

Configuração de email, no Emacs. Extremamente simples e com 
apenas uma dependência externa: mailutils.

Para instalar no Alpine é só entrar [[https://pkgs.alpinelinux.org/package/edge/testing/x86/mailutils][aqui]], se você usa uma outra
distribuição, como o Arch por exemplo, é só checar seus 
repositórios padrões ou procurar por um repositório externo, 
como o AUR ou algum PPA por exemplo.

Depois de instalar o mailutils, é só abrir o emacs e usar o 
rmail como bem entender. 

Eu fiz uma gambiarra sem precedentes para conseguir ter uma
forma do rmail ler um arquivo gpg como senha, mas, tenho
orgulho dessa gambiarra.

Você ainda deve providênciar algumas informações, 
como usuário, domínios, servidores e também criar um arquivo
gpg contendo sua senha para você conseguir baixar seu e-mail 
e configurar um arquivo authinfo.gpg para poder enviar e-mail.

Legenda:
- HOST		= domínio do provedor		(Ex: imap.gmail.com)
- DOMAIN	= domínio do email		(Ex: gmail.com)
- USER		= usuário do email		(Ex: johndoe)
- HOST SMTP	= servidor smtp do provedor	(Ex: smtp.gmail.com)
- NAME		= o nome do usuário		(Ex: John Doe)

_OBS: Por mais que na legenda eu tenha colocado o GMAIL como exemplo,_
_Eu não configurei o RMAIL para receber e-mail do GMAIL, mas sim para_
_receber e-mail de uma conta minha no [[https://cock.li][cock.li]]._

#+begin_src emacs-lisp
(defun senha/mail()
  (epa-decrypt-file "~/.authinfo.gpg" ">/dev/null")
  (setq senha (shell-command-to-string "gpg -dq ~/.config/emacs/mail/pass.gpg")))
(defun mail/main()
  (interactive)

  (setenv "MAILHOST" "HOST")
  (setq 
   rmail-delete-after-output 1                
   rmail-mime-prefer-html nil
   smtpmail-smtp-server "HOST SMTP"
   smtpmail-smtp-service 587
   smtpmail-stream-type 'starttls
   send-mail-function 'smtpmail-send-it       
   )
  (load-library "smtpmail")
  (senha/mail)
  (setenv "MAIL"
	  (concat "imaps://"
		  "USER%40DOMAIN"
		   senha
		  "@HOST"))

  (setq                 
   rmail-file-name   "~/.config/emacs/mail/inbox"           
   rmail-secondary-file-directory "~/.config/emacs/mail/"    
   message-default-headers "Fcc: ~/.config/emacs/mail/sent/" 
   user-full-name    "NAME"                  
   user-mail-address "EMAIL")
)
(defun openmail()
  (interactive)
  (mail/main)
  (rmail-input rmail-file-name)
)

#+end_src

*** erc
Mesma lógica da configuração do rmail, você deve providenciar um 

nome de usuário e também um arquivo gpg contendo uma senha para 
esse usuário.

A única diferença aqui é que você só precisa usar essa função caso 
você tenha um usuário irc registrado. Se esse não for o seu caso, 
então você pode deixar a linhas 248-250,253 e 260 comentadas.

#+begin_src emacs-lisp
(defun senha/irc()
  (epa-decrypt-file "~/.authinfo.gpg" ">/dev/null")
  (setq senhairc 
	(shell-command-to-string "gpg -dq ~/.config/emacs/irc.gpg")
	)
)
(defun irc()
  (interactive)
  (senha/irc)
  (setq
   erc-prompt-for-password nil
   erc-server "irc.libera.chat"
   erc-port "6697"
   erc-nick "USUÁRIO"
   erc-user-fullname "NOME COMPLETO")
  (erc-tls :password senhairc)
)
#+end_src

** pacotes externos

Bem, é aqui onde os pacotes externos podem ser colocados e 
configurados. Na verdade qualquer lugar desse arquivo pode 
ser usado, mas eu prefiro deixar um lugar dedicado para fins 
de organização.

Eu não vou deixar nenhum pacote externo pré-configurado, 
isso é algo que você vai ter que fazer por conta própria, 
mas eu vou deixar um bloco com uma configuração do use-package.

*** use-package
#+begin_src emacs-lisp
;;(require 'use-package-ensure)
;;(unless (package-installed-p 'use-package)
;;  (package-refresh-contents)
;;  (package-install 'use-package))
;;(eval-and-compile
;;(setq use-package-always-ensure t
;;      use-package-expand-minimally t))
#+end_src

** scripts
Basicamente shell scripts, só que executados no emacs.
Não sei ainda quais scripts eu vou colocar aqui.
*** upload
Um script que faz o upload de arquivos para o [[https://0x0.st][0x0.st]].
Ele usa a sua seleção do cursor para procurar o arquivo, 
depois disso ele faz o upload e entrega a url do arquivo.

Algumas coisas que você precisa saber antes de usar isso aqui:

1. O script vai procurar pelo seu diretório home inteiro, incluindo dotfiles.
2. Por padrão, o script faz o upload com a geração de url simples. O que é mais fácil de ser descoberto.
3. Nunca faça o upload de algo privado, sensível ou identificável, a única forma de deletar algo é entrando em contato com o suporte.
4. A busca por arquivos é case-sensitive, então Dados.db e dados.db não serão enviados ao mesmo tempo.


#+begin_src emacs-lisp
(defun upload()
  (interactive)
  (setq file (buffer-substring (region-beginning)(region-end)))
  (compile (concat "find ~/ -name " 
		   file 
		   " -type f -print0" 
		   "|" 
		   "xargs -0 -I \"{}\" curl -s -F\"file=@{}\" http://0x0.st"))
)
#+end_src

* teclas de atalho
** Padrões

Uma lista das teclas de atalho que acho importantes, 
úteis ou simplesmente interessantes.

 |----------------------+------------------------------------------------------+------|
 | Tecla                | Ação                                                 | modo |
 |----------------------+------------------------------------------------------+------|
 | C-w                  | cortar                                               |      |
 | M-w                  | copiar                                               |      |
 | C-y                  | colar                                                |      |
 | C-x u ou C-/         | desfazer                                             |      |
 | C-k                  | deletar linha                                        |      |
 | C-x C-u              | deixar seleção em caixa alta                         |      |
 | C-x C-l              | deixar seleção em caixa baixa                        |      |
 | C-Home               | topo do buffer                                       |      |
 | C-End                | fim do buffer                                        |      |
 | C-x k                | matar buffer atual                                   |      |
 | C-x b                | alterna entre buffers                                |      |
 | C-x x r              | renomear buffer                                      |      |
 | C-x C-e              | avaliar código                                       |      |
 | C-x d                | gerenciador de arquivos                              |      |
 | C-x C-f              | abrir arquivo                                        |      |
 | C-x C-s              | salvar arquivo                                       |      |
 | C-x C-b              | lista de buffers abertos                             |      |
 | C-x o                | trocar de janela                                     |      |
 | C-x 0                | fechar janela                                        |      |
 | C-x 1                | fechar todas as janelas exceto a atual               |      |
 | C-x 2                | abrir janela embaixo                                 |      |
 | C-x 3                | abrir janela na direita                              |      |
 | C-x 4 f              | abrir novo arquivo na mesma janela                   |      |
 | C-x 5 f              | abrir novo arquivo em uma nova janela                |      |
 | C-x C-c              | fechar emacs                                         |      |
 | M-x                  | executar um comando                                  |      |
 | S-tab                | recolher listas                                      | org  |
 | C-x r m              | definir Bookmark                                     |      |
 | C-x r l              | lista de Bookmarks                                   |      |
 | M-!                  | executar comando externo                             |      |
 | C-c C-c              | marcar Checkbox como concluída                       | org  |
 | C-c C-x C-v          | mostrar imagens do buffer                            | org  |
 | C-x t 2              | cria uma aba                                         |      |
 | C-x t 1              | fecha as outras abas                                 |      |
 | C-x t 0              | fecha a aba atual                                    |      |
 | C-x t d              | abre o dired em uma nova aba                         |      |
 | C-x t O              | aba anterior                                         |      |
 | C-x t o              | próxima aba                                          |      |
 | M-shift up/down      | movimentar linha sob cursor                          |      |
 | C-c C-e              | exportar arquivo                                     | org  |
 | S-Esquerda/Direita   | alternar entre estados                               | org  |
 | M-Esquerda/Direita   | alterar hierarquia das headings                      | org  |
 | C-x =                | aumenta o texto                                      |      |
 | C-x -                | diminui o texto                                      |      |
 | C-x Esquerda/Direita | alterna entre buffers à esquerda ou direita do atual |      |
 | &                    | abrir url em navegador externo                       | eww  |
 | l                    | voltar para página anterior                          | eww  |
 | d                    | download                                             | eww  |
 | v                    | código-fonte da página                               | eww  |
 | b                    | adiciona bookmark                                    | eww  |
 | b                    | lista de bookmarks                                   | eww  |
 | C-x espaço           | seleção (bloco)                                      |      |
 | C-x r t              | substituição de texto (bloco)                        |      |
 | C-espaço             | seleção (linha)                                      |      |
 | C-a                  | início da linha                                      |      |
 | C-e                  | fim da linha                                         |      |
 | C-c                  | copiar                                               | cua  |
 | C-x                  | cortar                                               | cua  |
 | C-v                  | colar                                                | cua  |
 | C-z                  | desfazer                                             | cua  |
 | C-S-z                | refazer                                              | cua  |
 | C-x C-x (rápido)     | C-x                                                  | cua  |
 | C-c C-c (rápido)     | C-c                                                  | cua  |
 |----------------------+------------------------------------------------------+------|
** Customizadas
Lugar onde guardo teclas de atalhos customizadas.
#+begin_src emacs-lisp
(keymap-global-set	"C-x C-b"	'ibuffer)
(keymap-global-set	"s-/ r"		'restart-emacs)
(keymap-global-set	"s-/ s"		'eshell)
(keymap-global-set	"s-/ b"		'battery)
(keymap-global-set	"s-/ e"		'irc)
(keymap-global-set	"s-/ m"		'openmail)
(keymap-global-set	"s-/ u"		'upload)
(keymap-global-set	"s-/ c"		'compile)
(keymap-global-set	"s-/ i"		'display-fill-column-indicator-mode)
(keymap-global-set	"M-<insert>"	'dabbrev-expand)
(keymap-global-set	"<insert>"	'dabbrev-completion)
#+end_src

